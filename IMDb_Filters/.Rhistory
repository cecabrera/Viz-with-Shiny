require(shiny); runApp('C:/Users/CamiloE/Dropbox/1. Proyectos/Ikognitive/SugarCRM', launch.browser = TRUE)
require(rsconnect); rsconnect::deployApp('C:/Users/CamiloE/Dropbox/1. Proyectos/Ikognitive/SugarCRM')
require(shiny); runApp('C:/Users/CamiloE/Dropbox/1. Proyectos/Ikognitive/SugarCRM', launch.browser = TRUE)
getwd()
require(shiny); runApp('C:/Users/CamiloE/Dropbox/1. Proyectos/Ikognitive/SugarCRM', launch.browser = TRUE)
require(shiny); runApp('C:/Users/CamiloE/Dropbox/1. Proyectos/Ikognitive/Clientes/SugarCRM', launch.browser = TRUE)
require(shiny); runApp('C:/Users/CamiloE/Dropbox/1. Proyectos/Ikognitive/Clientes/SugarCRM', launch.browser = TRUE)
require(rsconnect); rsconnect::deployApp('C:/Users/CamiloE/Dropbox/1. Proyectos/Ikognitive/Clientes/SugarCRM')
;kadsjflkajdf;kladsjfkl;
## basic example
png(file="mygraphic.png",width=400,height=350)
plot(x=rnorm(10),y=rnorm(10),main="example")
dev.off()
## Reduced margins at top and left
set.seed(21721)
png(file="notitle.png",width=400, height=350)
par(mar=c(5,3,2,2)+0.1)
hist(rnorm(100),ylab=NULL,main=NULL)
dev.off()
## basic example
png(file="mygraphic.png",width=400,height=350)
plot(x=rnorm(10),y=rnorm(10),main="example")
plot(x=rnorm(10),y=rnorm(10),main="example")
dev.off()
## Reduced margins at top and left
set.seed(21721)
png(file="notitle.png",width=400, height=350)
par(mar=c(5,3,2,2)+0.1)
hist(rnorm(100),ylab=NULL,main=NULL)
dev.off()
## Same as above with default margins, for comparison
set.seed(21721)
png(file="notitle-default.png",width=400, height=350)
hist(rnorm(100),ylab=NULL,main=NULL)
dev.off()
png(file="animals45.png",width=400,height=350,res=45)
plot(Animals, log="xy", type="n", main="Animal brain/body size")
text(Animals, lab=row.names(Animals))
install.packages("googlesheets")
library(googlesheets)
gs_read("https://docs.google.com/spreadsheets/d/1aohCHfHEwxrIjSVU12ayST_qQelVPcVMZvLv52hK20Y/edit?usp=sharing")
gs_url("https://docs.google.com/spreadsheets/d/1aohCHfHEwxrIjSVU12ayST_qQelVPcVMZvLv52hK20Y/edit?usp=sharing")
gs_browse(ss="https://docs.google.com/spreadsheets/d/1aohCHfHEwxrIjSVU12ayST_qQelVPcVMZvLv52hK20Y/edit?usp=sharing")
gs_read(ss = "https://docs.google.com/spreadsheets/d/1aohCHfHEwxrIjSVU12ayST_qQelVPcVMZvLv52hK20Y")
gs_gap()
gs_ls()
gs_ls()
gs_read(ss = "Tweets for Plebiscito")
gs_read(ws = "Tweets for Plebiscito")
?gs_read
gs_title("Tweets for Plebiscito")
tweets <- gs_title("Tweets for Plebiscito")
gs_read(tweets, ws = 1)
d <- as.data.table(gs_read(tweets, ws = 1))
require(data.table)
d <- as.data.table(gs_read(tweets, ws = 1))
head(d)
class(head(d))
colnames(d)
d <- gs_read(tweets, ws = 1)
head(d)
colnames(d)
d[1,]
class(d)
head(d)
d
as.data.table(d)
d <- as.data.table(gs_read(tweets, ws = 1))
head()
head()
head(d)
d[1]
colnames(d) <- d[1]
d[1]
d[1][[1]]
str(d[1])
d[1,]
class(d[1,])
paste(d[1,])
colnames(d) <- paste(d[1])
head(d)
d[nrow(d)]
d[1:nrow(d)]
d[2:nrow(d)]
word.cloud <- function(text, language = "english", skipwords = NULL, freq = NULL, kmeans.centers = 8, graph.title = "Graph"){
# @text. This code assumes the text object is already clean and loaded.
# @language. Language to make stopwords cleaning.
# @skipwords. Skip words if any.
# @freq. maximum word frequency to consider at the word graph
# @kmeans.centers. how many center to consider during clustering.
# @graph.title. Graph title.
# Packages:
require(wordcloud)
require(XML)
require(tm)
require(igraph)
require(RColorBrewer)
# Step 4: Create Lexical Corpus and term-document matrix
# create corpus
corpus <- Corpus(VectorSource(text)) ; rm(text)
# remove stopwords
skipwords <- c(stopwords(language), skipwords)
corpus <- tm_map(corpus, removeWords, skipwords)
# convert term-document to matrix
m <- as.matrix(TermDocumentMatrix(corpus)) ; rm(corpus)
# Step 5: Matrix with frequent words
# word counts
wc <- rowSums(m)
# get those words above the 3rd quantile
if(is.null(freq)){
freq <- quantile(wc, probs=0.5)
}
good <- m[wc > freq,] ; rm(wc, freq, m)
# remove columns (docs) with zeroes
good <- good[,colSums(good)!=0]
# Step 6: Obtain an adjacency matrix and create a graph
# adjacency matrix
M <- good %*% t(good) ; rm(good)
# set zeroes in diagonal
diag(M) <- 0
# graph
g <- graph.adjacency(M,
weighted=TRUE,
mode="undirected",
add.rownames=TRUE
)
# layout
glay <- layout.fruchterman.reingold(g)
# let's superimpose a cluster structure with k-means clustering
gk <- kmeans(M, centers=kmeans.centers)$cluster ; rm(M)
# Step 7: Prepare a nice color palette
# Create nice colors for each cluster
gpal <- rgb2hsv(col2rgb(c("red", brewer.pal(kmeans.centers, "Dark2"))))
gcols <- rep("", length(gk))
for (k in 1:kmeans.centers) {
gcols[gk == k] = hsv(gpal[1,k], gpal[2,k], gpal[3,k], alpha=0.5)
}
# Step 8: Create the graph to see what people is talking about
# prepare ingredients for plot
V(g)$size = 20
V(g)$label = V(g)$name
V(g)$degree = degree(g)
V(g)$label.cex = 1.5 * log10(V(g)$degree)
V(g)$label.color = hsv(0, 0, 0.2, 0.55)
V(g)$frame.color = NA
V(g)$color = gcols
E(g)$color = hsv(0, 0, 0.7, 0.3)
# plot
plot(g, layout=glay)
title(graph.title, col.main="gray40", cex.main=1.5, family="serif")
}
setwd("C:/Users/CamiloE/Dropbox/1. Proyectos/Ikognitive/Twitter") ; source("data/read.R")
require(rsconnect); rsconnect::deployApp('C:/Users/CamiloE/Dropbox/1. Proyectos/Ikognitive/Clientes/IkonoCRM')
require(rsconnect); rsconnect::deployApp('C:/Users/CamiloE/Dropbox/1. Proyectos/Ikognitive/Clientes/DemoCRM')
require(rsconnect); rsconnect::deployApp('C:/Users/CamiloE/Dropbox/1. Proyectos/Ikognitive/Clientes/DemoCRM')
require(data.table)
require(googlesheets)
# gs_ls() # autenticate your account
tweets <- gs_title("Tweets Plebiscito")
tweets <- as.data.table(gs_read(tweets, ws = 1))[, .(text, sentiment, vote)]
tweets[tweets$sentiment %in% "Neutro ", sentiment := "Neutro"]
tweets[tweets$sentiment %in% "Positivo ", sentiment := "Positivo"]
tweets[tweets$sentiment %in% "positivo", sentiment := "Positivo"]
tweets[tweets$vote %in% "si", vote := "Si"]
tweets$text <- gsub("http\\w+", "", tweets$text)
tweets$sentiment <- factor(tweets$sentiment)
tweets$vote <- factor(tweets$vote)
# Tabla de proporciones
tweets$dependent <- tweets$vote
tweets <- tweets[tweets$dependent %in% c("Si", "No"), .(text, dependent)]
library(tm)
word <- "plebiscito"
lan <- "spanish"
corpus <- Corpus(VectorSource(tweets$text))
corpus <- tm_map(corpus, tolower)
corpus <- tm_map(corpus, PlainTextDocument)
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, c(word, stopwords(lan)))
# corpus <- tm_map(corpus, stemDocument, language = lan)
content(corpus[[20]])
# Set up frequencies for Analysis
frequencies <- DocumentTermMatrix(corpus)
# inspect(frequencies[800:805,505:515])
# findFreqTerms(frequencies, lowfreq=50)
# Remove sparse terms
sparse <- removeSparseTerms(frequencies, 0.995)
tweetsSparse <- as.data.frame(as.matrix(sparse))
# Make all variable names R-friendly
colnames(tweetsSparse) <- make.names(colnames(tweetsSparse))
# Add dependent variable
tweetsSparse$dependent <- tweets$dependent
# WORD CLOUD BASED ON FREQUENCIAS
library(wordcloud)
m = as.matrix(frequencies) #we define tdm as matrix
word_freqs = sort(colSums(m), decreasing=TRUE) #now we get the word orders in decreasing order
dm = data.frame(word=names(word_freqs), freq=word_freqs) #we create our data set
wordcloud(dm$word, dm$freq, random.order=FALSE, colors=brewer.pal(8, "Dark2"), max.words=300) #and we visualize our data
positive <- subset(tweetsSparse, tweetsSparse$dependent=="Si")
positive$dependent <-NULL
negative <- subset(tweetsSparse, tweetsSparse$dependent=="No")
negative$dependent <-NULL
word.cloud
wordcloud(dm$word, dm$freq, random.order=FALSE, colors=brewer.pal(8, "Dark2")) #and we visualize our data
wordcloud(positivas$word, positivas$freq, random.order=FALSE, colors=brewer.pal(8, "Dark2")
# , max.words=300
) #and we visualize our data
positivas <- as.data.frame(colSums(positive))
positivas$words <- row.names(positivas)
colnames(positivas) <- c("freq", "word")
str(positivas)
wordcloud(positivas$word, positivas$freq, random.order=FALSE, colors=brewer.pal(8, "Dark2")
# , max.words=300
) #and we visualize our data
negativas <- as.data.frame(colSums(negative))
negativas$words <- row.names(negativas)
colnames(negativas) <- c("freq", "word")
str(negativas)
wordcloud(negativas$word, negativas$freq, random.order=FALSE, colors=brewer.pal(8, "Dark2"), max.words=300) #and we visualize our data
require(shiny) ; runApp("C:\\Users\\CamiloE\\Dropbox\\1. Proyectos\\Ikognitive\\Analytics\\Dashboards\\IMDB\\EDA")
require(shiny); runApp('C:/Users/CamiloE/Dropbox/1. Proyectos/Ikognitive/Clientes/IkonoCRM', launch.browser = TRUE)
remove.packages("plotly")
library(plotly)
library
library(shiny)
library(miniUI)
library(ggplot2)
install.packages("miniUI")
library(shiny)
library(miniUI)
library(ggplot2)
ggbrush <- function(data, xvar, yvar) {
ui <- miniPage(
gadgetTitleBar("Drag to select points"),
miniContentPanel(
# The brush="brush" argument means we can listen for
# brush events on the plot using input$brush.
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session) {
# Render the plot
output$plot <- renderPlot({
# Plot the data with x/y vars indicated by the caller.
ggplot(data, aes_string(xvar, yvar)) + geom_point()
})
# Handle the Done button being pressed.
observeEvent(input$done, {
# Return the brushed points. See ?shiny::brushedPoints.
stopApp(brushedPoints(data, input$brush))
})
}
runGadget(ui, server)
}
ggbrush(mtcars, "hp", "mpg")
runGadget(ui, server, viewer = dialogViewer("ggbrush"))
ggbrush
require(shiny)
runApp
require(shiny) ; runApp("C:\Users\CamiloE\Dropbox\1. Proyectos\Ikognitive\Blogs\Viz with Shiny\IMDB Graphs", launch.browser = TRUE)
require(shiny) ; runApp("C:/Users/CamiloE/Dropbox/1. Proyectos/Ikognitive/Blogs/Viz with Shiny/IMDB Graphs", launch.browser = TRUE)
require(rsconnect); rsconnect::deployApp('C:/Users/CamiloE/Dropbox/1. Proyectos/Ikognitive/Blogs/Viz with Shiny/IMDB Graphs')
require(rsconnect); rsconnect::deployApp('C:/Users/CamiloE/Dropbox/1. Proyectos/Ikognitive/Blogs/Viz with Shiny/IMDB Graphs')
require(rsconnect); rsconnect::deployApp('C:/Users/CamiloE/Dropbox/1. Proyectos/Ikognitive/Blogs/Viz with Shiny/IMDB_Graphs')
require(shiny) ; runApp("C:/Users/CamiloE/Dropbox/1. Proyectos/Ikognitive/Blogs/Viz with Shiny/IMDB_Filters", launch.browser = TRUE)
require(shiny) ; runApp("C:/Users/CamiloE/Dropbox/1. Proyectos/Ikognitive/Blogs/Viz with Shiny/IMDB_Filters", launch.browser = TRUE)
require(rsconnect); rsconnect::deployApp('C:/Users/CamiloE/Dropbox/1. Proyectos/Ikognitive/Blogs/Viz with Shiny/IMDB_Filters')
require(shiny) ; runApp("C:/Users/CamiloE/Dropbox/1. Proyectos/Ikognitive/Blogs/Viz with Shiny/IMDB_Filters", launch.browser = TRUE)
